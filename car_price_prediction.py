# -*- coding: utf-8 -*-
"""car price prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BS6iV9dv6NeB1AW_dgHQL2RVSt7dKjNp
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
train=pd.read_csv('/content/train-data.csv')
train

train.info()

train.isna().sum()

train.describe()

lst=['Name','Location','Fuel_Type','Transmission','Owner_Type']
for i in lst:
  count=train[i].value_counts()
  print('column',i,'have',len(count),'unique values')
  print(count.index)
  print('*'*100)

lst=['Location','Fuel_Type','Transmission','Owner_Type']
for i in lst:
  count1=train[i].value_counts()
  plt.bar(count1.index,count1)
  plt.xlabel(i)
  plt.ylabel('count')
  plt.show()

#we should drop columns named - unnamed,newprize,name
#newprize column have large missing value and name have large set of unique values
#get dummies encoding
df1=pd.get_dummies(train[['Location','Fuel_Type','Transmission','Owner_Type']],drop_first=True)
df1

df2=pd.concat([train,df1],axis=1)
df2

df2.columns

#test data file dont have a column named 'Fuel_Type_Electric' therefore we should drop it
df3=df2.drop(['Unnamed: 0','Name','Location','Fuel_Type','Transmission','Owner_Type','New_Price'],axis=1)

#replace unit from mileage,engine,power
df3['Mileage']=df3['Mileage'].str.replace('km/kg','')
df3['Mileage']=df3['Mileage'].str.replace('kmpl','')
df3['Engine']=df3['Engine'].str.replace('CC','')
df3['Power']=df3['Engine'].str.replace('bhp','')
#there is 'null' in engine,power,mileage given in description
df3['Mileage']=df3['Mileage'].str.replace('null','0')
df3['Engine']=df3['Engine'].str.replace('null','0')
df3['Power']=df3['Power'].str.replace('null','0')
df3

df3.dtypes
#uint8 un directional integer

#convert datatype of object into int
df3['Engine']=df3['Engine'].astype(float)
df3['Mileage']=df3['Mileage'].astype(float)
df3['Power']=df3['Power'].astype(float)
df3.dtypes

df3.isna().sum()

#consider the '0' value we give instead of 'null' as a missing value and replace with NaN
df3.loc[df3.Engine==0,'Engine']=np.NaN
df3.loc[df3.Mileage==0,'Mileage']=np.NaN
df3.loc[df3.Power==0,'Power']=np.NaN

df3.isna().sum()

#filling missing values
df3['Mileage']=df3['Mileage'].fillna(df3['Mileage'].mean())
df3['Engine']=df3['Engine'].fillna(df3['Engine'].mean())
df3['Power']=df3['Power'].fillna(df3['Power'].mean())
df3['Seats']=df3['Seats'].fillna(df3['Seats'].mode()[0])

df3.isna().sum()

x=df3.drop(['Price','Fuel_Type_Electric'],axis=1)
x

y=df3['Price']
y

test=pd.read_csv('/content/test-data.csv')
test

test.info

test.describe()

test.dtypes

test.columns

test.isna().sum()

test['Location'].value_counts()

column='Location'
plt.figure(figsize=(8,6))
sns.countplot(data=test,x=column,order=test[column].value_counts().index)
plt.title('value counts of Location')
plt.xticks(rotation=45)
plt.show

test['Fuel_Type'].value_counts()

sns.countplot(x=test['Fuel_Type'])

test['Transmission'].value_counts()

sns.countplot(x=test['Transmission'])

test['Owner_Type'].value_counts()

sns.countplot(x=test['Owner_Type'])

test.columns

test1=pd.get_dummies(test[['Location','Fuel_Type','Transmission','Owner_Type']],drop_first=True)
test1

test2=pd.concat([test,test1],axis=1)
test2

test2=test2.drop(['Unnamed: 0','Name','Location','Fuel_Type','Transmission','Owner_Type','New_Price'],axis=1)

test2.dtypes

test2['Mileage']=test2['Mileage'].str.replace('km/kg','')
test2['Mileage']=test2['Mileage'].str.replace('kmpl','')
test2['Engine']=test2['Engine'].str.replace('CC','')
test2['Power']=test2['Power'].str.replace('bhp','')
test2['Mileage']=test2['Mileage'].str.replace('null','0')
test2['Engine']=test2['Engine'].str.replace('null','0')
test2['Power']=test2['Power'].str.replace('null','0')
test2

test2['Engine']=test2['Engine'].astype(float)
test2['Power']=test2['Power'].astype(float)
test2['Mileage']=test2['Mileage'].astype(float)
test2

test2.loc[test2.Engine==0,'Engine']=np.NaN
test2.loc[test2.Mileage==0,'Mileage']=np.NaN
test2.loc[test2.Power==0,'Power']=np.NaN

test2.isna().sum()

sns.histplot(x=test2['Mileage'],color='red')

sns.histplot(x=test2['Engine'])

sns.histplot(x=test2['Power'],color='green')

a=test2['Mileage'].mean()
test2['Mileage'].fillna(a,inplace=True)
b=test2['Engine'].median()
test2['Engine'].fillna(b,inplace=True)
c=test2['Power'].median()
test2['Power'].fillna(c,inplace=True)
d=test2['Seats'].mode()[0]
test2['Seats'].fillna(d,inplace=True)

test2.isna().sum()

from sklearn.ensemble import RandomForestRegressor
rf=RandomForestRegressor(n_estimators=100)
rf.fit(x,y)
ypred=rf.predict(test2)
ypred